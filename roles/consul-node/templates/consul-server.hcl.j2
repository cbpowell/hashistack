# server
# This flag is used to control if an agent is in server or client mode.
server = {{ consul_server_bool }}

# bootstrap_expect
{{ consul_bootstrap_output }}

acl {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
 
  tokens {
    initial_management = "{{ consul_http_token }}"
    agent = "{{ consul_http_token }}"
  }
}

connect {
  enabled = true
}

/*
On one Consul Server:
- Create OIDC key, with client ids for datacenter name (empiricist)
  Ex: vault write identity/oidc/key/oidc-autoconfig-key allowed_client_ids="empiricist"
- Create OIDC policy with read access to relevant roles
- Create a OIDC role, specifying above key and a template that looks at 
  the entity metadata for the "consul_hostname" parameter
  Ex: vault write identity/oidc/role/oidc-role-1 ttl=12h key="oidc-key-1" client_id="empiricist" template='{"consul": {"hostname": {{identity.entity.metadata.node}} } }'
- Create an AppRole with the OIDC policy
  Ex: vault write auth/approle/role/consul_jwt token_policies="oidc-policy"
- Get AppRole role_id
  Ex: vault read auth/approle/role/consul_jwt/role-id
- Get AppRole secret_id
  Ex: vault write -force auth/approle/role/consul_jwt/secret-id

- Make one entity per Consul agent
  Ex: vault write identity/entity @entity_template.json
  With:
    {
      "name": "empiricist-nn3",
      "metadata": {
        "node_name": "empiricist-nn3"
      },
      "policies": ["oidc-role-1"]
    }
- Attach an alias to that entity for the AppRole auth
  Ex: vault write identity/entity-alias name="empiricist-nn3" canonical_id="11581990-d06e-4257-c469-0267a0015fed" mount_accessor="auth_approle_8f264e22"
- Get login token via AppRole
  Ex: vault write auth/approle/login role_id="8bd82136-02d9-2bf2-1d71-6a4ce9ff3fc6" secret_id="102bb5ca-bf43-5a4d-5681-4efc18bffe93"
  
*/

auto_config {
  authorization {
	  enabled = true
		static {
			oidc_discovery_url = "{{ vault_token_issuer_url }}/v1/identity/oidc"
			bound_issuer = "{{ vault_token_issuer_url }}/v1/identity/oidc"
			bound_audiences = ["{{ consul_dc_name }}"]
			claim_mappings {
				"/consul/hostname" = "node_name"
			}
			claim_assertions = [
				"value.node_name == \"${node}\""
			]
		}
	}
}